<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Nov 2024 16:25:02 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My First Post</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Fri, 29 Nov 2024 16:25:02 +0800</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/2023-02-19-common-cpp-std-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-02-19-common-cpp-std-algorithm/</guid>
      <description>&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/2023-02-27-v8-builtin-code-addr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-02-27-v8-builtin-code-addr/</guid>
      <description>&lt;h1 id=&#34;获取-v8-builtin-函数的地址&#34;&gt;获取 v8 builtin 函数的地址&lt;/h1&gt;&#xA;&lt;p&gt;v8 的 builtin 函数不是完全用 CPP 实现的，例如 CodeStubAssembler 是由 CPP 生成 tubrofan 的 IR，再由 turbofan 编译出机器码。所以这部分代码肯定不能像普通的 CPP 代码那样进行调试的。&lt;/p&gt;&#xA;&lt;p&gt;搜索了一些材料以后发现了一些调试方法，这里记录一下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从 isolate-&amp;gt;builtin 数组中找到对应的函数起始地址&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://v8.dev/docs/gdb&#34;&gt;https://v8.dev/docs/gdb&lt;/a&gt; 记录的内容，这部分代码也是可以下断点&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/2023-03-12-msvc-stl-std-lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-03-12-msvc-stl-std-lock/</guid>
      <description>&lt;p&gt;对 std::lock 的规避死锁的方法感兴趣，分析一下相关代码&lt;/p&gt;&#xA;&lt;p&gt;在 mutex 里找到 lock 的定义&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-CPP&#34; data-lang=&#34;CPP&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Lock0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Lock1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;... &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_LockN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; lock(_Lock0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _Lk0, _Lock1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _Lk1, _LockN&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;... _LkN) { &lt;span style=&#34;color:#75715e&#34;&gt;// lock multiple locks, without deadlock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    _Lock_nonmember1(_Lk0, _Lk1, _LkN...);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;_Lock_nonmember1 有两个重载&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-CPP&#34; data-lang=&#34;CPP&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Lock0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Lock1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; _Lock_nonmember1(_Lock0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _Lk0, _Lock1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _Lk1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// lock 2 locks, without deadlock, special case for better codegen and reduced metaprogramming for common case&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (_Lock_attempt_small(_Lk0, _Lk1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; _Lock_attempt_small(_Lk1, _Lk0)) { &lt;span style=&#34;color:#75715e&#34;&gt;// keep trying&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Lock0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Lock1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Lock2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;... &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_LockN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; _Lock_nonmember1(_Lock0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _Lk0, _Lock1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _Lk1, _Lock2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _Lk2, _LockN&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;... _LkN) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// lock 3 or more locks, without deadlock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _Hard_lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (_Hard_lock &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _Hard_lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _Lock_attempt(_Hard_lock, _Lk0, _Lk1, _Lk2, _LkN...);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先看简单的情况，如果只有两个 mutex 会不断尝试以两种顺序加锁，如直到两个锁都获取到。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/2023-03-19-msvc-stl-future-promise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-03-19-msvc-stl-future-promise/</guid>
      <description>&lt;p&gt;先看 &lt;code&gt;Promise&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-CPP&#34; data-lang=&#34;CPP&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;classs _Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;promise&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;promise()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _MyPromise(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; _Associasted_state&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_Promise&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; _MyPromise;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Ty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;promise&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;promise()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _MyPromise(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; _Associated_state&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_Promise&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; _MyPromise;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;promise&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;promise()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _MyPromise(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; _Associate_state&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_Promise&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; _MyPromise;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Ty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Promise&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_Promise(_Associate_satte&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;*&lt;/span&gt; _State_ptr) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _State(_State_ptr, false),  _Future_retrived(false) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_State_manager&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; _State;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; _Future_retrived;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Ty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_State_manager&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_State_manager() &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _Assoc_state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_Associated_state&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;*&lt;/span&gt; _Assoc_state;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; _Get_only_once;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;classs _Ty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Associated_state&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/2023-09-26-cve-2022-4262/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-09-26-cve-2022-4262/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/cve-2023-05-20-v8-entry-frame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cve-2023-05-20-v8-entry-frame/</guid>
      <description>&lt;h1 id=&#34;v8-栈帧系列1---entryframe&#34;&gt;v8 栈帧系列1 - EntryFrame&lt;/h1&gt;&#xA;&lt;p&gt;v8 中有多种不同的栈帧，了解这些栈帧是我们理解 v8 解释器/Builtin 代码的基础，所以我打算学习一下常用的栈帧的格式，先来最基础的 EntryFrame。&lt;/p&gt;&#xA;&lt;p&gt;从 CPP 跳到 Javascript 的入口点是 Builtins_JSEntry 函数，这个函数是由汇编实现的，代码在 x64 架构上是在 src/builtins/x64/builtins-x64.cc:Builtins::Generate_JSEntry 函数， 这个函数序言就会在栈上构造一个 EntryFrame。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Builtins&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Generate_JSEntry(MacroAssembler&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; masm) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Generate_JSEntryVariant(masm, StackFrame&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ENTRY,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          Builtins&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kJSEntryTrampoline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Called with the native C calling convention. The corresponding function&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// signature is either:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//   using JSEntryFunction = GeneratedCode&amp;lt;Address(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//       Address root_register_value, Address new_target, Address target,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//       Address receiver, intptr_t argc, Address** argv)&amp;gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//   using JSEntryFunction = GeneratedCode&amp;lt;Address(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//       Address root_register_value, MicrotaskQueue* microtask_queue)&amp;gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Generate_JSEntryVariant&lt;/span&gt;(MacroAssembler&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; masm, StackFrame&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Type type,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             Builtins&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Name entry_trampoline) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Label invoke, handler_entry, exit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Label not_outermost_js, not_outermost_js_2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {  &lt;span style=&#34;color:#75715e&#34;&gt;// NOLINT. Scope block confuses linter.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NoRootArrayScope uninitialized_root_register(masm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Set up frame.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ pushq(rbp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movq(rbp, rsp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Push the stack frame type.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ Push(Immediate(StackFrame&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TypeToMarker(type)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Reserve a slot for the context. It is filled after the root register has&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// been set up.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ AllocateStackSpace(kSystemPointerSize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Save callee-saved registers (X64/X32/Win64 calling conventions).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ pushq(r12);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ pushq(r13);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ pushq(r14);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ pushq(r15);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef _WIN64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ pushq(rdi);  &lt;span style=&#34;color:#75715e&#34;&gt;// Only callee save in Win64 ABI, argument in AMD64 ABI.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ pushq(rsi);  &lt;span style=&#34;color:#75715e&#34;&gt;// Only callee save in Win64 ABI, argument in AMD64 ABI.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ pushq(rbx);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef _WIN64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// On Win64 XMM6-XMM15 are callee-save.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ AllocateStackSpace(EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegistersBlockSize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), xmm6);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), xmm7);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), xmm8);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), xmm9);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), xmm10);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), xmm11);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), xmm12);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;), xmm13);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), xmm14);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ movdqu(Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;), xmm15);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    STATIC_ASSERT(EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kCalleeSaveXMMRegisters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    STATIC_ASSERT(EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegistersBlockSize &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kCalleeSaveXMMRegisters);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize the root register.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// C calling convention. The first argument is passed in arg_reg_1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    __ movq(kRootRegister, arg_reg_1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Save copies of the top frame descriptor on the stack.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  ExternalReference c_entry_fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExternalReference&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Create(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      IsolateAddressId&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kCEntryFPAddress, masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isolate());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Operand c_entry_fp_operand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ExternalReferenceAsOperand(c_entry_fp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ Push(c_entry_fp_operand);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Store the context address in the previously-reserved slot.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  ExternalReference context_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExternalReference&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Create(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      IsolateAddressId&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kContextAddress, masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isolate());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Load(kScratchRegister, context_address);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; kOffsetToContextSlot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; kSystemPointerSize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movq(Operand(rbp, kOffsetToContextSlot), kScratchRegister);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// If this is the outermost JS call, set js_entry_sp value.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  ExternalReference js_entry_sp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExternalReference&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Create(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      IsolateAddressId&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kJSEntrySPAddress, masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isolate());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Load(rax, js_entry_sp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ testq(rax, rax);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ j(not_zero, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;not_outermost_js);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Push(Immediate(StackFrame&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OUTERMOST_JSENTRY_FRAME));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movq(rax, rbp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Store(js_entry_sp, rax);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Label cont;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ jmp(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cont);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ bind(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;not_outermost_js);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Push(Immediate(StackFrame&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;INNER_JSENTRY_FRAME));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ bind(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cont);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Jump to a faked try block that does the invoke, with a faked catch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// block that sets the pending exception.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ jmp(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;invoke);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ bind(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;handler_entry);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Store the current pc as the handler offset. It&amp;#39;s used later to create the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// handler table.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isolate()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;builtins()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetJSEntryHandlerOffset(handler_entry.pos());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Caught exception: Store result (exception) in the pending exception&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// field in the JSEnv and return a failure sentinel.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  ExternalReference pending_exception &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExternalReference&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Create(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      IsolateAddressId&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kPendingExceptionAddress, masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isolate());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Store(pending_exception, rax);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ LoadRoot(rax, RootIndex&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kException);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ jmp(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;exit);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Invoke: Link this frame into the handler chain.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ bind(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;invoke);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ PushStackHandler();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Invoke the function by calling through JS entry trampoline builtin and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// pop the faked function when we return.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Handle&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Code&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; trampoline_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isolate()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;builtins()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;builtin_handle(entry_trampoline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Call(trampoline_code, RelocInfo&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CODE_TARGET);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Unlink this frame from the handler chain.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ PopStackHandler();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ bind(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;exit);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Check if the current stack frame is marked as the outermost JS frame.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ Pop(rbx);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ cmpq(rbx, Immediate(StackFrame&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OUTERMOST_JSENTRY_FRAME));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ j(not_equal, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;not_outermost_js_2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ Move(kScratchRegister, js_entry_sp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movq(Operand(kScratchRegister, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), Immediate(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ bind(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;not_outermost_js_2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Restore the top frame descriptor from the stack.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Operand c_entry_fp_operand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; masm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ExternalReferenceAsOperand(c_entry_fp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ Pop(c_entry_fp_operand);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Restore callee-saved registers (X64 conventions).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef _WIN64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// On Win64 XMM6-XMM15 are callee-save&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ movdqu(xmm6, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm7, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm8, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm9, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm10, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm11, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm12, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm13, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm14, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ movdqu(xmm15, Operand(rsp, EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegisterSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ addq(rsp, Immediate(EntryFrameConstants&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kXMMRegistersBlockSize));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ popq(rbx);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef _WIN64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Callee save on in Win64 ABI, arguments/volatile in AMD64 ABI.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ popq(rsi);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ popq(rdi);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ popq(r15);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ popq(r14);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ popq(r13);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ popq(r12);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ addq(rsp, Immediate(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; kSystemPointerSize));  &lt;span style=&#34;color:#75715e&#34;&gt;// remove markers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Restore frame pointer and return.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __ popq(rbp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __ ret(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;EntryFrame 的作用主要是保存 CPP 调用的现场，以便在 Javascript 执行完毕后返回到 上一层的 CPP 的代码中继续执行，保存的内容如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chrome 构建错误</title>
      <link>http://localhost:1313/posts/2022-06-08-chromium-build-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-06-08-chromium-build-error/</guid>
      <description>&lt;h2 id=&#34;lld-link-error-invalid-timestamp--2142000-expected-32-bit-integer&#34;&gt;lld-link: error: invalid timestamp: -2142000. Expected 32-bit integer&lt;/h2&gt;&#xA;&lt;p&gt;build\util\LASTCHANGE.committime 文件内容为 0 导致的。&#xA;此文件里记录的应该是从 git 日志中提取的上次 commit 的时间戳，如果获取失败了默认填入 0。&#xA;手工改成合理的时间戳( epoch ) 再重新执行 gn 即可。&lt;/p&gt;&#xA;&lt;h2 id=&#34;openssl-config-gailed-error25078067&#34;&gt;openssl config gailed: error:25078067&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FAILED: gen/chrome/browser/resources/settings/vulcanized.html gen/chrome/browser/resources/settings/lazy_load.vulcanized.html gen/chrome/browser/resources/settings/crisper.js gen/chrome/browser/resources/settings/lazy_load.crisper.js&#xA;d:/depot_tools/bootstrap-2@3_8_10_chromium_23_bin/python/bin/python.exe ../../chrome/browser/resources/optimize_webui.py --host settings --input gen/chrome/browser/resources/settings/settings_resources.unpak --out_folder gen/chrome/browser/resources/settings --depfile gen/chrome/browser/resources/settings/build.d --js_out_files crisper.js lazy_load.crisper.js --exclude chrome://resources/mojo/chromeos/services/network_config/public/mojom/cros_network_config.mojom.html --html_in_files settings.html lazy_load.html --html_out_files vulcanized.html lazy_load.vulcanized.html --insert_in_head &amp;#34;&amp;lt;base href=\&amp;#34;chrome://settings\&amp;#34;&amp;gt;&amp;#34;&#xA;Traceback (most recent call last):&#xA;  File &amp;#34;../../chrome/browser/resources/optimize_webui.py&amp;#34;, line 363, in &amp;lt;module&amp;gt;&#xA;    main(sys.argv[1:])&#xA;  File &amp;#34;../../chrome/browser/resources/optimize_webui.py&amp;#34;, line 346, in main&#xA;    manifest_out_path = _optimize(args.input, args)&#xA;  File &amp;#34;../../chrome/browser/resources/optimize_webui.py&amp;#34;, line 300, in _optimize&#xA;    manifest_out_path, args, excludes)&#xA;  File &amp;#34;../../chrome/browser/resources/optimize_webui.py&amp;#34;, line 273, in _bundle_v2&#xA;    &amp;#39;--js&amp;#39;, os.path.join(tmp_out_dir, js_out_file)])&#xA;  File &amp;#34;..\..\third_party\node\node.py&amp;#34;, line 27, in RunNode&#xA;    raise RuntimeError(&amp;#39;%s failed: %s&amp;#39; % (cmd, stderr))&#xA;RuntimeError: ..\..\third_party\node\win\node.exe ..\..\third_party\node\node_modules\crisper\bin\crisper --source D:/chromium2/src/out/CVE-2020-6418/gen/chrome/browser/resources/settings/bundled\settings.html --script-in-head false --html D:/chromium2/src/out/CVE-2020-6418/gen/chrome/browser/resources/settings/bundled\vulcanized.html --js D:/chromium2/src/out/CVE-2020-6418/gen/chrome/browser/resources/settings/bundled\crisper.js failed: openssl config failed: error:25078067:DSO support routines:win32_load:could not load the shared library&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现这个错误是因为设置了 &lt;code&gt;OPENSSL_CONF&lt;/code&gt; 环境变量，把这个环境变量置空可以解决。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chromium 和 v8 的一些参数（WIP)</title>
      <link>http://localhost:1313/posts/2022-06-24-v8-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-06-24-v8-parameters/</guid>
      <description>&lt;h1 id=&#34;v8-参数&#34;&gt;V8 参数&lt;/h1&gt;&#xA;&lt;h2 id=&#34;构建参数&#34;&gt;构建参数&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;v8_enable_snapshot_code_comments = false # 编译 builtins 函数时带上相应的注释，有助于我们调试时快速了解 builtins 函数的意义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;调试函数&#34;&gt;调试函数&lt;/h2&gt;&#xA;&lt;p&gt;v8 提供了一些可以辅助调试的 Runtime 函数，命令行中指定 &amp;ndash;allow-natives-syntax 后就可以在 JavaScript 代码中使用，常用的如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;%DebugPrint()&lt;/li&gt;&#xA;&lt;li&gt;%SystemBreak()&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;编译中间结果&#34;&gt;编译中间结果&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--print-ast&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--trace-turbo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;chrome-命令参数&#34;&gt;Chrome 命令参数&lt;/h2&gt;&#xA;&lt;p&gt;上面的 v8 参数 Chrome 也是支持的，但是用法和给 d8 指定时有些区别：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;v8 的参数要放到&amp;ndash;js-flags=中，例如 chrome.exe &amp;ndash;js-flags=&amp;quot;&amp;ndash;trace-turbo&amp;quot;&lt;/li&gt;&#xA;&lt;li&gt;还要额外加上 &amp;ndash;no-sandbox 参数，否则 v8 引擎所在的渲染进程是在沙箱中运行的，没法输出日志到控制台或者文件中&lt;/li&gt;&#xA;&lt;li&gt;需要指定 &amp;ndash;enable-&lt;em&gt;logging&lt;/em&gt;=stderr 参数，这样 chrome 才会把 %DebugPrint() 一类的输出，输出到进程所属控制台&lt;/li&gt;&#xA;&lt;li&gt;例如：在命令行执行  &lt;code&gt;chrome.exe --no-sandbox --enable-logging=stderr --js-flags=&amp;quot;--help&amp;quot;&lt;/code&gt; 之后会看到 v8 命令的帮助&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>CTF oob-v8</title>
      <link>http://localhost:1313/posts/2022-04-30-ctf-oob-v8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-04-30-ctf-oob-v8/</guid>
      <description>&lt;p&gt;参照 &lt;a href=&#34;https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/&#34;&gt;starctf-oob-v8-indepth&lt;/a&gt; 完成 CTF 题目 oob-v8，学习 v8 漏洞利用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;&#xA;&lt;p&gt;参照&lt;a href=&#34;https://v8.dev/docs/build&#34;&gt;官方文档&lt;/a&gt;准备 v8 的构建环境。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;ℹ️NOTE&lt;/strong&gt;: 有 Chromium 的构建环境话，把构建命令改成 &lt;code&gt;autoninja -C out\Default\ d8&lt;/code&gt; 就可以构建 d8.exe。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;p&gt;题目修改了 v8 源码，给数组添加了一个有漏洞的函数 &lt;code&gt;oob&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index b027d36..ef1002f 100644&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/src/bootstrapper.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/src/bootstrapper.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle&amp;lt;JSGlobalObject&amp;gt; global_object,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                           Builtins::kArrayPrototypeCopyWithin, 2, false);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     SimpleInstallFunction(isolate_, proto, &amp;#34;fill&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Builtins::kArrayPrototypeFill, 1, false);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    SimpleInstallFunction(isolate_, proto, &amp;#34;oob&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+                          Builtins::kArrayOob,2,false);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;     SimpleInstallFunction(isolate_, proto, &amp;#34;find&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Builtins::kArrayPrototypeFind, 1, false);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     SimpleInstallFunction(isolate_, proto, &amp;#34;findIndex&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 8df340e..9b828ab 100644&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/src/builtins/builtins-array.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/src/builtins/builtins-array.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -361,6 +361,27 @@ V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   return *final_length;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }  // namespace&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+BUILTIN(ArrayOob){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    uint32_t len = args.length();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    if(len &amp;gt; 2) return ReadOnlyRoots(isolate).undefined_value();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    Handle&amp;lt;JSReceiver&amp;gt; receiver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+            isolate, receiver, Object::ToObject(isolate, args.receiver()));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    Handle&amp;lt;JSArray&amp;gt; array = Handle&amp;lt;JSArray&amp;gt;::cast(receiver);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&amp;gt;elements());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    uint32_t length = static_cast&amp;lt;uint32_t&amp;gt;(array-&amp;gt;length()-&amp;gt;Number());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    if(len == 1){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        //read&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        return *(isolate-&amp;gt;factory()-&amp;gt;NewNumber(elements.get_scalar(length)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    }else{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        //write&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        Handle&amp;lt;Object&amp;gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+                isolate, value, Object::ToNumber(isolate, args.at&amp;lt;Object&amp;gt;(1)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        elements.set(length,value-&amp;gt;Number());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        return ReadOnlyRoots(isolate).undefined_value();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; BUILTIN(ArrayPush) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   HandleScope scope(isolate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 0447230..f113a81 100644&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/src/builtins/builtins-definitions.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/src/builtins/builtins-definitions.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -368,6 +368,7 @@ namespace internal {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  CPP(ArrayOob)                                                                \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;                                                                                \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   /* ArrayBuffer */                                                            \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   /* ES #sec-arraybuffer-constructor */                                        \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index ed1e4a5..c199e3a 100644&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/src/compiler/typer.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/src/compiler/typer.cc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -1680,6 +1680,8 @@ Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;       return Type::Receiver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     case Builtins::kArrayUnshift:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       return t-&amp;gt;cache_-&amp;gt;kPositiveSafeInteger;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    case Builtins::kArrayOob:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+      return Type::Receiver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     // ArrayBuffer functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     case Builtins::kArrayBufferIsView:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码定义了 builtins 函数 &lt;code&gt;ArrayOob&lt;/code&gt;，把它赋值到 &lt;code&gt;Array.prototype.oob&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-16009 （WIP）</title>
      <link>http://localhost:1313/posts/2022-06-03-cve-2020-16009/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-06-03-cve-2020-16009/</guid>
      <description>&lt;p&gt;分析在野利用 &lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-16009.html&#34;&gt;CVE-2020-16009&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;复现&#34;&gt;复现&lt;/h2&gt;&#xA;&lt;p&gt;下载 &lt;a href=&#34;https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/796621/&#34;&gt;Chrome 86.0.4230.1&lt;/a&gt;，&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2021-30632 Analysis</title>
      <link>http://localhost:1313/posts/2023-02-21-cve-2021-30632/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-02-21-cve-2021-30632/</guid>
      <description>&lt;p&gt;打算练习一下英文写作，所以这篇尝试用英文写。&lt;/p&gt;&#xA;&lt;p&gt;Analysis V8 vulnerability CVE-2021-30632.&lt;/p&gt;&#xA;&lt;h2 id=&#34;enviroment&#34;&gt;Enviroment&lt;/h2&gt;&#xA;&lt;h3 id=&#34;get-vulnerable-exe&#34;&gt;Get Vulnerable Exe&lt;/h3&gt;&#xA;&lt;p&gt;According to &lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30632.html&#34;&gt;google P0 0day-RCAs&lt;/a&gt;, this vulnerability affects version pre 93.0.4577.82. With the help of &lt;a href=&#34;https://vikyd.github.io/download-chromium-history-version/#/&#34;&gt;https://vikyd.github.io/download-chromium-history-version/#/&lt;/a&gt;, I got the download url of chromium 93.0.4573.1 Win64 with pdb file, &lt;a href=&#34;https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/900323/&#34;&gt;https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/900323/&lt;/a&gt;. I also built a debug version of chromium for a better debugging experience.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prepare-poc&#34;&gt;Prepare POC&lt;/h2&gt;&#xA;&lt;p&gt;Steal this POC code from Google P0 0day RCAs page.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PrepareFunctionForOptimization&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OptimizeFunctionOnNextCall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PrepareFunctionForOptimization&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OptimizeFunctionOnNextCall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DebugPrint&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;use &lt;code&gt;python -m http.server 9999&lt;/code&gt;  create a site at port 9999.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-1096 (WIP)</title>
      <link>http://localhost:1313/posts/2022-11-26-cve-2022-1096/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-11-26-cve-2022-1096/</guid>
      <description>&lt;p&gt;CVE-2022-1096 是 CVE-2021-30551 的变种。&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备环境&#34;&gt;准备环境&lt;/h2&gt;&#xA;&lt;p&gt;阅读 &lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2022/CVE-2022-1096.html&#34;&gt;Google P0 的分析报告&lt;/a&gt; 得知修复的版本是 99.0.4844.84，搜到对应的&lt;a href=&#34;https://chromereleases.googleblog.com/2022/03/stable-channel-update-for-desktop_25.html&#34;&gt;发布记录&lt;/a&gt;，依照时间找到上一个版本是 &lt;a href=&#34;https://chromereleases.googleblog.com/2022/03/stable-channel-update-for-desktop_20.html&#34;&gt;99.0.4844.82&lt;/a&gt;，使用 &lt;a href=&#34;2022-05-31-get-old-version-chrome-binary.md&#34;&gt;获取旧版本的 Chrome&lt;/a&gt; 中的方法构建出对应的二进制文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;分析成因&#34;&gt;分析成因&lt;/h2&gt;&#xA;&lt;p&gt;将 POC 代码稍加修改，方便调试：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;createElement&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; () =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据之前调试 CVE-2021-30551 积累的经验，漏洞是在 v8/src/objects/objects.cc：&lt;code&gt;Object::SetProperty&lt;/code&gt; 函数执行过程中触发的，在 alert(1) 弹出后，在 Object::SetProperty 函数开头下断点，然后点掉弹窗，让程序断下后开始调试。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Maybe&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetProperty(LookupIterator&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; it, Handle&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; value,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                StoreOrigin store_origin,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                Maybe&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ShouldThrow&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; should_throw) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (it&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;IsFound()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Maybe&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SetPropertyInternal(it, value, should_throw, store_origin, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;found);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (found) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;CheckContextualStoreToJSGlobalObject(it, should_throw)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Nothing&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddDataProperty&lt;/span&gt;(it, value, NONE, should_throw, store_origin);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大体和 CVE-2021-30551 的流程一致，虽然 style 对象还没有名为 prop 的属性，但是由于 style 是设置了 INTERCEPTOR 的 DOM 对象， 属性的查找结果是找到了 INTERCEPTOR，it-&amp;gt;IsFound() 条件满足，程序走到 SetPropertyInternal 中，经过多层调用，最终到达 V8CSSStyleDeclaration::NamedPropertySetterCallback 函调函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DynamoRIO 常用参数</title>
      <link>http://localhost:1313/posts/2022-07-20-dynamo-rio-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-07-20-dynamo-rio-options/</guid>
      <description>&lt;p&gt;很多 Fuzzing 相关的工具，诸如 winAFL、lighthouse 都涉及到 DynamoRIO 的使用，记录一些常用的 DynamoRIO 参数便于解决在使用这些工具时遇到的问题。&lt;/p&gt;&#xA;&lt;p&gt;drrun 的参数&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-no_follow_children:&#xA;默认情况下 DynamoRIO 会插装目标整个进程树，很多时候这并不是我们希望的动作，指定此参数后仅插装目标进程，忽略子进程。&#xA;还可以指定仅插装指定的子进程&lt;/li&gt;&#xA;&lt;li&gt;-msgbox_mask _0xN：&#xA;在指定事件发生时弹出消息窗，一般用在调试过程中。&#xA;例如：发现目标进程运行一会就会崩溃，可以指定 -msgbox_mask 15, 这样目标进程启动后会弹出一个消息框，便于我们附加到目标进程上。&lt;/li&gt;&#xA;&lt;li&gt;更参数见 &lt;a href=&#34;https://dynamorio.org/page_deploy.html#sec_options&#34;&gt;DynamoRIO Runtime Options&lt;/a&gt; 部分&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>IDA Pro Tips 整理</title>
      <link>http://localhost:1313/posts/2022-08-03-ida-pro-cpp-tips-collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-08-03-ida-pro-cpp-tips-collection/</guid>
      <description>&lt;h2 id=&#34;来源&#34;&gt;来源&lt;/h2&gt;&#xA;&lt;p&gt;这里记录的 Tips 都是从网上其他地方看到的，来源包括以下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://swarm.ptsecurity.com/ida-pro-tips/&#34;&gt;https://swarm.ptsecurity.com/ida-pro-tips/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hex-rays.com/blog/tag/idatips/&#34;&gt;https://hex-rays.com/blog/tag/idatips/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;逆向-cpp-对象&#34;&gt;逆向 CPP 对象&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IDA 内置了对 CPP 虚函数表的支持，只要把结构体中虚表对应的成员名为设置为 __vtable，类型名设置为 Xxx_vtbl 即可: &lt;a href=&#34;https://www.hex-rays.com/products/ida/support/idadoc/1691.shtml&#34;&gt;https://www.hex-rays.com/products/ida/support/idadoc/1691.shtml&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;快速创建结构体：https://hex-rays.com/blog/igor-tip-of-the-week-11-quickly-creating-structures/&#xA;&lt;ul&gt;&#xA;&lt;li&gt;选中的常量数据，右键菜单创建结构体&lt;/li&gt;&#xA;&lt;li&gt;在 local types 窗口，用 C 代码创建&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;逆向 CPP 代码时，经常可以在构造函数之前的 new 语句处得知对象的总大小，但不知道每个成员的意义和大小，可以用 &lt;a href=&#34;https://hex-rays.com/blog/igor-tip-of-the-week-12-creating-structures-with-known-size/&#34;&gt;https://hex-rays.com/blog/igor-tip-of-the-week-12-creating-structures-with-known-size/&lt;/a&gt; 介绍的方法先创建出一组哑成员，后面再慢慢的逆向出各成员的意义&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>PlantUML 源码备份</title>
      <link>http://localhost:1313/posts/2022-06-11-plantuml-source-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-06-11-plantuml-source-code/</guid>
      <description>&lt;p&gt;本文用来备份博客中出现的 PlantUML 图的源码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cve-2021-30551&#34;&gt;CVE-2021-30551&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plantuml-svg&#34; data-lang=&#34;plantuml-svg&#34;&gt;@startuml&#xA;map transitions_1 {&#xA;corrupted_prop =&amp;gt;&#xA;}&#xA;&#xA;map transitions_2 {&#xA;corrupted_prop =&amp;gt;&#xA;}&#xA;&#xA;map map_1 {&#xA;transitions *-&amp;gt; transitions_1&#xA;descriptors =&amp;gt; [regular_prop]&#xA;}&#xA;&#xA;map transitions_0 {&#xA;regular_prop =&amp;gt;&#xA;}&#xA;&#xA;map map_2 {&#xA;transitions *-&amp;gt; transitions_2&#xA;descriptors =&amp;gt; [regular_prop, corrupted_prop]&#xA;}&#xA;&#xA;map object_1 {&#xA;map *-&amp;gt; map_2&#xA;}&#xA;&#xA;map map_3 {&#xA;transitions =&amp;gt; null&#xA;descriptors =&amp;gt; [regular_prop, corrupted_prop, corrupted_prop]&#xA;}&#xA;&#xA;map object_2 {&#xA;map *-&amp;gt; map_3&#xA;}&#xA;&#xA;map map_0 {&#xA;transitions *-&amp;gt; transitions_0&#xA;descriptors =&amp;gt; []&#xA;}&#xA;&#xA;transitions_0::regular_prop ==&amp;gt; map_1&#xA;transitions_1::corrupted_prop ==&amp;gt; map_2&#xA;transitions_2::corrupted_prop ==&amp;gt; map_3&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plantuml-svg&#34; data-lang=&#34;plantuml-svg&#34;&gt;@startuml&#xA;&#xA;package deprecated {&#xA;map transitions_1 {&#xA;corrupted_prop =&amp;gt;&#xA;}&#xA;&#xA;map transitions_2 {&#xA;corrupted_prop =&amp;gt;&#xA;}&#xA;&#xA;map map_1 {&#xA;transitions *-&amp;gt; transitions_1&#xA;descriptors =&amp;gt; [regular_prop]&#xA;}&#xA;&#xA;map map_2 {&#xA;transitions *-&amp;gt; transitions_2&#xA;descriptors =&amp;gt; [regular_prop, corrupted_prop]&#xA;}&#xA;&#xA;&#xA;map map_3 {&#xA;transitions =&amp;gt; null&#xA;descriptors =&amp;gt; [regular_prop, corrupted_prop, corrupted_prop]&#xA;}&#xA;&#xA;&#xA;transitions_1::corrupted_prop ==&amp;gt; map_2&#xA;transitions_2::corrupted_prop ==&amp;gt; map_3&#xA;}&#xA;&#xA;map object_2 {&#xA;map *-&amp;gt; deprecated.map_3&#xA;}&#xA;&#xA;map transitions_3 {&#xA;regular_prop =&amp;gt;&#xA;}&#xA;&#xA;map transitions_4 {&#xA;corrupted_prop =&amp;gt;&#xA;}&#xA;&#xA;map transitions_5 {&#xA;corrupted_prop =&amp;gt;&#xA;}&#xA;&#xA;map map_4 {&#xA;transitions *-&amp;gt; transitions_4&#xA;descriptors =&amp;gt; [regular_prop]&#xA;}&#xA;&#xA;map map_5 {&#xA;transitions *-&amp;gt; transitions_5&#xA;descriptors =&amp;gt; [regular_prop, corrupted_prop]&#xA;}&#xA;&#xA;map map_6 {&#xA;transitions =&amp;gt; null&#xA;descriptors =&amp;gt; [regular_prop, corrupted_prop, corrupted_prop]&#xA;}&#xA;&#xA;map map_0 {&#xA;transitions *-&amp;gt; transitions_3&#xA;descriptors =&amp;gt; []&#xA;}&#xA;&#xA;map object_1 {&#xA;map *-&amp;gt; map_6&#xA;}&#xA;&#xA;&#xA;&#xA;transitions_3::regular_prop ==&amp;gt; map_4&#xA;transitions_4::corrupted_prop ==&amp;gt; map_5&#xA;transitions_5::corrupted_prop ==&amp;gt; map_6&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cve-2021-37975&#34;&gt;CVE-2021-37975&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plantuml-svg&#34; data-lang=&#34;plantuml-svg&#34;&gt;object k_0&#xA;object k_1&#xA;object k_2&#xA;object k_3&#xA;&#xA;map retMap {&#xA;}&#xA;&#xA;map m_3 {&#xA;k_2 =&amp;gt;&#xA;}&#xA;&#xA;map m_2 {&#xA;k_2 =&amp;gt;&#xA;k_1 =&amp;gt;&#xA;}&#xA;&#xA;map m_1 {&#xA;k_1 =&amp;gt;&#xA;k_0 =&amp;gt;&#xA;}&#xA;&#xA;map m_0 {&#xA;k_0 =&amp;gt;&#xA;initKey =&amp;gt;&#xA;}&#xA;&#xA;map map1 {&#xA;initKey =&amp;gt;&#xA;k_3 =&amp;gt;&#xA;}&#xA;&#xA;object initKey&#xA;&#xA;map1::k_3 =&amp;gt; retMap&#xA;map1::initKey ==&amp;gt; m_0&#xA;m_0::k_0 ==&amp;gt; m_1&#xA;m_1::k_1 ==&amp;gt; m_2&#xA;m_2::k_2 ==&amp;gt; m_3&#xA;&#xA;m_0::initKey ==&amp;gt; k_0&#xA;m_1::k_0 ==&amp;gt; k_1&#xA;m_2::k_1 ==&amp;gt; k_2&#xA;m_3::k_2 ==&amp;gt; k_3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;@startuml&#xA;&#xA;object k_0&#xA;object k_1&#xA;object k_2&#xA;object k_3&#xA;&#xA;object k_5&#xA;object k_7&#xA;object k_9&#xA;object k_8&#xA;&#xA;map m_8 {&#xA;k_8 =&amp;gt;&#xA;}&#xA;&#xA;map m_7 {&#xA;k_7 =&amp;gt;&#xA;k_8 =&amp;gt;&#xA;}&#xA;&#xA;map m_5 {&#xA;k_3 =&amp;gt;&#xA;}&#xA;&#xA;object v9&#xA;&#xA;map retMap {&#xA;k_5 =&amp;gt;&#xA;k_3 =&amp;gt;&#xA;}&#xA;&#xA;map m_3 {&#xA;k_2 =&amp;gt;&#xA;}&#xA;&#xA;map m_2 {&#xA;k_2 =&amp;gt;&#xA;k_1 =&amp;gt;&#xA;}&#xA;&#xA;map m_1 {&#xA;k_1 =&amp;gt;&#xA;k_0 =&amp;gt;&#xA;}&#xA;&#xA;map m_0 {&#xA;k_0 =&amp;gt;&#xA;initKey =&amp;gt;&#xA;}&#xA;&#xA;map map1 {&#xA;initKey =&amp;gt;&#xA;k_3 =&amp;gt;&#xA;k_7 =&amp;gt;&#xA;k_9 =&amp;gt;&#xA;}&#xA;&#xA;object initKey&#xA;&#xA;map1::k_3 =&amp;gt; retMap&#xA;map1::initKey ==&amp;gt; m_0&#xA;m_0::k_0 ==&amp;gt; m_1&#xA;m_1::k_1 ==&amp;gt; m_2&#xA;m_2::k_2 ==&amp;gt; m_3&#xA;&#xA;m_0::initKey ==&amp;gt; k_0&#xA;m_1::k_0 ==&amp;gt; k_1&#xA;m_2::k_1 ==&amp;gt; k_2&#xA;&#xA;m_3::k_2 ==&amp;gt; k_3&#xA;&#xA;map1::k_7 ==&amp;gt; m_7&#xA;map1::k_9 ==&amp;gt; v9&#xA;&#xA;retMap::k_5 ==&amp;gt; m_5&#xA;retMap::k_3 ==&amp;gt; k_5&#xA;&#xA;m_5::k_3 ==&amp;gt; k_7&#xA;m_7::k_8 ==&amp;gt; m_8&#xA;m_7::k_7 ==&amp;gt; k_8&#xA;&#xA;m_8::k_8 ==&amp;gt; k_9&#xA;&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;@startuml&#xA;&#xA;object k_0&#xA;object k_1&#xA;object k_2&#xA;object k_3&#xA;&#xA;object k_5&#xA;object k_7&#xA;object k_9&#xA;object k_8&#xA;&#xA;object Roots&#xA;&#xA;map m_8 {&#xA;k_8 =&amp;gt;&#xA;}&#xA;&#xA;map m_7 {&#xA;k_7 =&amp;gt;&#xA;k_8 =&amp;gt;&#xA;}&#xA;&#xA;map m_5 {&#xA;k_3 =&amp;gt;&#xA;}&#xA;&#xA;object v9&#xA;&#xA;map retMap {&#xA;k_5 =&amp;gt;&#xA;k_3 =&amp;gt;&#xA;}&#xA;&#xA;map m_3 {&#xA;k_2 =&amp;gt;&#xA;}&#xA;&#xA;map m_2 {&#xA;k_2 =&amp;gt;&#xA;k_1 =&amp;gt;&#xA;}&#xA;&#xA;map m_1 {&#xA;k_1 =&amp;gt;&#xA;k_0 =&amp;gt;&#xA;}&#xA;&#xA;map m_0 {&#xA;k_0 =&amp;gt;&#xA;initKey =&amp;gt;&#xA;}&#xA;&#xA;map map1 {&#xA;initKey =&amp;gt;&#xA;k_3 =&amp;gt;&#xA;k_7 =&amp;gt;&#xA;k_9 =&amp;gt;&#xA;}&#xA;&#xA;object initKey&#xA;&#xA;map1::k_3 =&amp;gt; retMap : 5&#xA;&#xA;map1::initKey ==&amp;gt; m_0&#xA;&#xA;m_0::k_0 ==&amp;gt; m_1 : 8&#xA;m_0::initKey ==&amp;gt; k_0 : 8&#xA;&#xA;m_1::k_0 ==&amp;gt; k_1 : 7&#xA;m_1::k_1 ==&amp;gt; m_2 : 7&#xA;&#xA;m_2::k_2 ==&amp;gt; m_3 : 6&#xA;m_2::k_1 ==&amp;gt; k_2 : 6&#xA;&#xA;m_3::k_2 ==&amp;gt; k_3 : 5&#xA;&#xA;map1::k_7 ==&amp;gt; m_7 : 3&#xA;map1::k_9 ==&amp;gt; v9 : 0&#xA;&#xA;retMap::k_5 ==&amp;gt; m_5 : 4&#xA;retMap::k_3 ==&amp;gt; k_5 : 4&#xA;&#xA;m_5::k_3 ==&amp;gt; k_7 : 3&#xA;&#xA;m_7::k_8 ==&amp;gt; m_8 : 2&#xA;m_7::k_7 ==&amp;gt; k_8 : 2&#xA;&#xA;m_8::k_8 ==&amp;gt; k_9 : 1&#xA;&#xA;Roots ==&amp;gt; map1 : *&#xA;Roots ==&amp;gt; initKey : *&#xA;&#xA;k_9 o.. map1::k_9&#xA;&#xA;k_8 o.. m_7::k_8&#xA;k_8 o.. m_8::k_8&#xA;&#xA;k_7 o.. m_7::k_7&#xA;k_7 o.. map1::k_7&#xA;&#xA;k_5 o.. retMap::k_5&#xA;k_3 o.. map1::k_3&#xA;k_3 o.. retMap::k_3&#xA;k_2 o.. m_3::k_2&#xA;k_1 o.. m_1::k_1&#xA;k_0 o.. m_0::k_0&#xA;&#xA;initKey o.. map1::initKey&#xA;&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>V8 IR 结构</title>
      <link>http://localhost:1313/posts/2022-09-15-v8-ir-struct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-09-15-v8-ir-struct/</guid>
      <description>&lt;h2 id=&#34;node&#34;&gt;Node&lt;/h2&gt;&#xA;&lt;p&gt;每个节点都代表一次操作，由操作符和参数组成。&lt;/p&gt;&#xA;&lt;h2 id=&#34;operator&#34;&gt;Operator&lt;/h2&gt;</description>
    </item>
    <item>
      <title>v8 资料汇总</title>
      <link>http://localhost:1313/posts/2022-12-11-v8-documents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-12-11-v8-documents/</guid>
      <description>&lt;h2 id=&#34;v8-资料汇总&#34;&gt;V8 资料汇总&lt;/h2&gt;&#xA;&lt;p&gt;v8 的资料虽然很多，但是很多是非官方的资料，或者没有一个统一的所搜入口，今天在 v8-dev 用户组发现一个不错的帖子，里面包含一些我以前没搜到过的资料，我就想我干脆自己整理一份，把我觉得非常值得读的资料都列到一篇文章里，以后不断更新。&lt;/p&gt;&#xA;&lt;h3 id=&#34;121211-更新&#34;&gt;12.12.11 更新&lt;/h3&gt;&#xA;&lt;p&gt;![截图](Pasted image 20221211203015.png)&#xA;From: &lt;a href=&#34;https://groups.google.com/g/v8-dev/c/J-lbjGeu6Yw&#34;&gt;https://groups.google.com/g/v8-dev/c/J-lbjGeu6Yw&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The best way to start with V8 is to play around &amp;ldquo;hello world&amp;rdquo; at &lt;a href=&#34;https://v8.dev/docs/embed&#34;&gt;https://v8.dev/docs/embed&lt;/a&gt; to find out the basics.   &amp;ndash; 这篇是 v8 团队发的官方文章，大体上是讲怎么把 v8 当作嵌入式解释器使用，中间讲了很多 v8 的基本概念，入门必读。&lt;/li&gt;&#xA;&lt;li&gt;Then, &lt;a href=&#34;https://github.com/thlorenz/v8-perf/blob/master/README.md&#34;&gt;https://github.com/thlorenz/v8-perf/blob/master/README.md&lt;/a&gt; will give you some links to find out how V8 works internally  - 包含介绍 v8 内部实现的很多内容，包括很多 v8 团队发布很多 talk 的视频和文档，我今天刚知道这个，还没仔细看&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://v8.dev/docs&#34;&gt;https://v8.dev/docs&lt;/a&gt; will explain some workflows to use. - 官方文档，也包括了 v8 个方面的内容，和第二个有一些内容是重复的，例如想了解 turbofan 可以看 &lt;a href=&#34;https://v8.dev/docs/turbofan&#34;&gt;https://v8.dev/docs/turbofan&lt;/a&gt; ，个人感觉第二个的导航做的更好一些。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>分析 CVE-2019-13720</title>
      <link>http://localhost:1313/posts/2022-05-26-cve-2019-13720/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-05-26-cve-2019-13720/</guid>
      <description>&lt;h1 id=&#34;cve-2019-13720&#34;&gt;CVE-2019-13720&lt;/h1&gt;&#xA;&lt;p&gt;分析&lt;a href=&#34;https://securelist.com/the-zero-day-exploits-of-operation-wizardopium/97086/&#34;&gt;卡巴斯基&lt;/a&gt; 2019 年披露的在野利用 &lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2019/CVE-2019-13720.html&#34;&gt;CVE-2019-13720&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;漏洞分析&#34;&gt;漏洞分析&lt;/h2&gt;&#xA;&lt;h3 id=&#34;复现&#34;&gt;复现&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://securelist.com/the-zero-day-exploits-of-operation-wizardopium/97086/&#34;&gt;分析报告&lt;/a&gt; 记录了受影响的 Chrome 版本号 76.0.3809.87，依照&lt;a href=&#34;2022-05-31-get-old-version-chrome-binary.md&#34;&gt;获取旧版本的 Chrome&lt;/a&gt; 中记录的方法，构建出 Chrome.exe。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;ℹ️NOTE&lt;/strong&gt;：编译使用的 Clang 与最新的 MSVC 运行时不兼容，编译此版本需要安装 Visual Studio 2017&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;从分析报告提取出 POC 代码片段，拼凑成一个完整的 POC 页面，代码中缺少 &lt;code&gt;getPartitionPageFreeListHeadEntryBySlotSize&lt;/code&gt; 函数，先补充一个空函数，稍后理解了 POC 后再把它补上了。&lt;/p&gt;&#xA;&lt;p&gt;python -m http.server 为 POC 页面搭建一个本地站点，Chrome.exe 访问 http://localhost:8000/ 确认可以触发漏洞。&lt;/p&gt;&#xA;&lt;h3 id=&#34;web-audio-api&#34;&gt;Web Audio API&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;ℹ️NOTE&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;POC 用到了很多 Web Audio API 相关的对象，推荐先看下 MDN 相关页面：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API&#34;&gt;MDN Using Web Audio API&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Audio_API&#34;&gt;MDN Web Audio API&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Web Audio API 提供了流式处理音频数据的能力，支持音频解码，音效处理等常用操作。&lt;/p&gt;&#xA;&lt;p&gt;用法：先创建 AudioContext 对象，再创建多个音频节点，将它们连到一起组成音频处理图。AudioContext 对象有一个特殊的 desination 节点，代表最终输出的音频。处理图从源节点开始，到目的节点结束，中间可以连接多个音效节点。启动处理任务，音频数据就沿着图到达各个中间节点，经过中间节点的处理，再继续流转到下个节点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分析 CVE-2021-30551</title>
      <link>http://localhost:1313/posts/2022-04-30-cve-2021-30551/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-04-30-cve-2021-30551/</guid>
      <description>&lt;p&gt;分析 2021 年的 Chrome 在野利用 &lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2021/CVE-2021-30551.html&#34;&gt;CVE-2022-30551&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备环境&#34;&gt;准备环境&lt;/h2&gt;&#xA;&lt;h3 id=&#34;构建-chrome&#34;&gt;构建 Chrome&lt;/h3&gt;&#xA;&lt;p&gt;从&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=1216437&#34;&gt; Bug Report 页面&lt;/a&gt;，找到受影响的 Chromium 版本 93.0.4532.0。&#xA;依照&lt;a href=&#34;2022-05-31-get-old-version-chrome-binary.md&#34;&gt;获取旧版本的 Chrome&lt;/a&gt; 记录的方法，从源码构建出 Chrome.exe。&lt;/p&gt;&#xA;&lt;h4 id=&#34;拉取源码&#34;&gt;拉取源码&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git fetch https://chromium.googlesource.com/chromium/src.git +refs/tags/93.0.4532.0:chromium_93.0.4532.0 --depth &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout tags/93.0.4532.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gn args out/cve-2021-30551&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ninja -C .&lt;span style=&#34;color:#ae81ff&#34;&gt;\o&lt;/span&gt;ut&lt;span style=&#34;color:#ae81ff&#34;&gt;\c&lt;/span&gt;ve-2021-30551 chrome&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;argsgn&#34;&gt;args.gn&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Build arguments go here.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See &amp;#34;gn args &amp;lt;out_dir&amp;gt; --list&amp;#34; for available build arguments.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# reduce build time&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is_component_build&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enable_nacl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# build release version，disable DCHECK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# DCHECK is chrome&amp;#39;s assert&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is_debug&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dcheck_always_on&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;vs-解决方案&#34;&gt;VS 解决方案&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;gn gen --ide=vs --filters=&#39;//base;v8&#39; --sln=v8_base .\out\cve-2021-30551\&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>分析 CVE-2021-37975</title>
      <link>http://localhost:1313/posts/2022-05-18-cve-2021-37975/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-05-18-cve-2021-37975/</guid>
      <description>&lt;p&gt;继续分析 Chrome 在野利用，这次分析 &lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-37975.html&#34;&gt;CVE-2021-37975&lt;/a&gt;，这个漏洞是 GC 组件中的代码逻辑问题，可以导致释放后重利用。正好通过分析这个漏洞了解一下 v8 的 GC 实现，以及释放后重利用漏洞的利用策略。&lt;/p&gt;&#xA;&lt;h2 id=&#34;复现&#34;&gt;复现&lt;/h2&gt;&#xA;&lt;p&gt;阅读&lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-37975.html&#34;&gt;报告&lt;/a&gt;得知低于 94.0.4606.71 的 Chrome 受此漏洞影响，搜索 &lt;a href=&#34;https://chromereleases.googleblog.com/2021/09/&#34;&gt;2021 年 9月 的 Chrome 发布记录&lt;/a&gt; 找到 94.0.4606.61，从源码构建出此版本 Chrome。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git fetch --depth 1 `&#xA;https://chromium.googlesource.com/chromium/src.git `&#xA;+refs/tags/94.0.4606.61:chromium_94.0.4606.61&#xA;&#xA;git checkout tags/94.0.4606.61&#xA;gclient sync -v&#xA;gclient sync --with_branch_heads&#xA;gclient runhooks&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gn args out/CVE-2021-37975&#xA;ninja -C out/CVE-2021-37975 chrome&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;ℹ️NOTE&lt;/strong&gt;: sync 过程中我遇到了 v8 rebase 冲突的问题，没找到导致冲突的原因，只好采用比较笨的办法，把 v8 目录删掉后重新运行 &lt;code&gt;gclient sync -v&lt;/code&gt;，这样 gclient 新同步了一份 v8 代码就可以了。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;提取报告中的 POC 代码，用 &lt;code&gt;python -m http.server&lt;/code&gt; 搭建一个可以触发漏洞的本地站点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分析 CVE-2022-1363</title>
      <link>http://localhost:1313/posts/2023-05-07-cve-2022-1364/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-05-07-cve-2022-1364/</guid>
      <description>&lt;p&gt;从 &lt;a href=&#34;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2022/CVE-2022-1364.html&#34;&gt;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2022/CVE-2022-1364.html&lt;/a&gt; 得到漏洞影响的 Chrome 版本以及 POC 代码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;复现&#34;&gt;复现&lt;/h2&gt;&#xA;&lt;p&gt;从 &lt;a href=&#34;https://vikyd.github.io/download-chromium-history-version/#/&#34;&gt;https://vikyd.github.io/download-chromium-history-version/#/&lt;/a&gt; 搜索到一个距修复版本比较近的版本 100.0.4896.124 的官方备份 &lt;a href=&#34;https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/972766/&#34;&gt;https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/972766/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;./Chrome.exe &amp;ndash;js-flags=&amp;quot;&amp;ndash;allow-natives-syntax&amp;quot; &amp;ndash;no-sandbox &amp;ndash;enable-logging=stderr 启动 Chrome，访问 POC 页面 index.html。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bug&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Error.&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareStackTrace&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;getThis&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Error().&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Error.&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareStackTrace&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;() {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;optim&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;opt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Function(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;if(typeof a===\&amp;#39;number\&amp;#39;){if(a&amp;gt;2){for(var i=0;i&amp;lt;100;i++);return;}b.d(a,b,1);return}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g++;&amp;#39;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;repeat&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Function(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;use strict&amp;#34;;b.a.call(arguments,b);return arguments[a];&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Function(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a.b(0,a)&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Function(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b.c();if(a){&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g++;&amp;#39;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;repeat&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;optim&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// jit optim&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bug&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;1E4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;opt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;optim&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;opt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;M&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// prints true.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;M&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// should be true as above but prints false.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，两次 console.log 分别输出 true 和 false。&lt;/p&gt;</description>
    </item>
    <item>
      <title>学习使用 AFL&#43;&#43;</title>
      <link>http://localhost:1313/posts/2022-07-19-afl-plus-plus-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-07-19-afl-plus-plus-usage/</guid>
      <description>&lt;p&gt;目前热度最高的漏洞挖掘方法应该就是 Fuzzing 了，本文记录我学习使用 AFL++ 来 Fuzzing 开源的音频文件标签处理库 &lt;a href=&#34;https://taglib.org/&#34;&gt;taglib&lt;/a&gt; 的过程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;构建-afl&#34;&gt;构建 AFL++&lt;/h2&gt;&#xA;&lt;p&gt;参考&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md&#34;&gt;官方文档&lt;/a&gt;即可，同时要注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AFL++ 支持的功能很丰富，考虑到大部分人不会用到所有功能，构建也是提供了不同的可选集合的，比如我只需要 llvm 的 instrumentation，就用 &lt;code&gt;make all&lt;/code&gt; 即可，文档里已经描述的很清楚了。&lt;/li&gt;&#xA;&lt;li&gt;如果需要 &lt;code&gt;llvm/gcc&lt;/code&gt; 以外的一些功能，构建过程中可能从 github/google 服务器拉取依赖代码，推荐挂好梯子&lt;/li&gt;&#xA;&lt;li&gt;先装好依赖确认 llvm-config/LLVM_CONFIG 可以正常使用后再去构建 AFL++，否则可能出现虽然构建成功了，但较新的 llvm 功能没有被构建到程序中的情况。&lt;/li&gt;&#xA;&lt;li&gt;构建完成后，运行 &lt;code&gt;make install&lt;/code&gt;，将 afl++ 安装到 /usr/local/bin 目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;构建-harness&#34;&gt;构建 harness&lt;/h2&gt;&#xA;&lt;p&gt;harness 是被 fuzzing 的程序，它会被 fuzzer 运行，负责执行待 fuzzing 的代码，同时采集代码覆盖信息反馈给 fuzzer。&lt;/p&gt;&#xA;&lt;p&gt;对于 taglib 来说，examples 目录下提供的 tagreader 程序，可以打开通过参数指定的音频文件，列出文件中包含的 tag，就可以直接作为 harmess 来使用。不过 fuzzing 过程中，会重复的打开文件，修改文件，如果每次打开一个文件都要重启程序，执行效率不高，我按照&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.persistent_mode.md&#34;&gt;官方文档 persist_mode &lt;/a&gt; 中提到的方法，对 tagreader.cpp 稍加修改，把它改成了启动后可以持续解析同一个文件的程序，这样省下了很多进程初始化的时间，提升了 fuzzing 效率。&lt;/p&gt;&#xA;&lt;p&gt;其实还可以进一步优化，采用内存映射的方式读取数据，这样映射一次后，数据就驻留在内存（数据总量很大时也可能是交换文件）中了，省去读取文件的时间。&lt;/p&gt;&#xA;&lt;p&gt;这里我先尝试用标版的 clang 构建出未修改的 tagreader，成功后再用 afl++ 的 llvm lto 模式构建了 perisst_mode 的 tagreader。这部分的构建官方文档我怀疑有部分内容过时了，对于 taglib 来说 lto 模式构建也很简单，如下操作即可：&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建 Chromium（墙内）</title>
      <link>http://localhost:1313/posts/2022-03-20-build-chromium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-03-20-build-chromium/</guid>
      <description>&lt;p&gt;本文记录在 Windows 系统构建 Chromium 的过程，方法完全抄袭自 &lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/HEAD/docs/windows_build_instructions.md&#34;&gt;官方文档&lt;/a&gt;，仅加入一些代理配置相关的内容。&lt;/p&gt;&#xA;&lt;h2 id=&#34;致谢&#34;&gt;致谢&lt;/h2&gt;&#xA;&lt;p&gt;多谢 GFW，把简单的事情变得复杂，让我们人生多了一些历练的机会🙃。&lt;/p&gt;&#xA;&lt;h2 id=&#34;visual-studio&#34;&gt;Visual Studio&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;至少需要 VS 2017，推荐使用 VS 2019，我用的版本是 VS 2019 Version 16.11.9。&lt;/li&gt;&#xA;&lt;li&gt;需要装 Desktop development with C++、MFC、ATL 这几个组件&lt;/li&gt;&#xA;&lt;li&gt;Windows SDK 版本要高于 10.0.19041，对于 VS 2019 来说默认就是满足的，不放心的话构建前可以先更新下。&lt;/li&gt;&#xA;&lt;li&gt;如果是编译 2019 年左右的旧版本，首选 VS 2017，我在用 VS 2019 编译旧版本时遇到了兼容问题，可以安装多个版本，构建时显示指定使用的版本。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;depot_tools&#34;&gt;depot_tools&lt;/h2&gt;&#xA;&lt;p&gt;depot_tools 是开发 Chromium 所需的一系列工具、脚本的集合。&lt;/p&gt;&#xA;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载 &lt;a href=&#34;https://storage.googleapis.com/chrome-infra/depot_tools.zip&#34;&gt;https://storage.googleapis.com/chrome-infra/depot_tools.zip&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;解压到任意位置，例如 d:/depot_tools。&lt;br&gt;&#xA;多年的采坑经验告诉我，解压路径层级少一点，不要超长，不要包含中文、空格，就不容易遇到奇怪的问题。&lt;/li&gt;&#xA;&lt;li&gt;解压完成后，要检查一下 depot_tools 目录，确认存在 .git 子目录，如果不存需要换一个解压工具，例如 7z。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;配置-git-可选&#34;&gt;配置 Git （可选）&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 提交代码需要&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ReplaceWithYourUserName&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ReplaceWithYourEmail@chromium.org&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git 自动转换换行回车&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git config --global core.autocrlf false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git 不存储文件权限&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git config --global core.filemode false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 rebase 合并拉取的代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git config --global branch.autosetuprebase always&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;环境变量&#34;&gt;环境变量&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将 depot_tools 目录加到 PATH，要确保加到 Python 的安装目录前，例如 PATH 的第一项。这会使 depot_tools 目录中的 Python 替代本地安装的 Python，如果你修改的是持久化的环境变量配置，用完后要改回去。&lt;/li&gt;&#xA;&lt;li&gt;DEPOT_TOOLS_WIN_TOOLCHAIN 设置为 0，使用本地的 Visual Studio 工具构建 Chrome&lt;/li&gt;&#xA;&lt;li&gt;(可选) vs2019_install/vs2017_install/vs2022_install: 设置为 Visual Studio 的安装目录。&#xA;depot_tools 会自动搜索 Visual Studio 安装目录，如果对搜索结果不满意可以用此环境变量显示指定版本和安装目录&#xA;例如，机器上安装了多个 Visual Studio，默认搜索到的可能是 VS 2019，如果你想用 VS 2022 的话，就可以指定 vs2022_install 环境变量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这个 URL 目前不需要挂代理，需要代理可以改成:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Invoke-WebRequest -URI `&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   https://storage.googleapis.com/chrome-infra/depot_tools.zip `&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   -Proxy &amp;#34;http://127.0.0.1:8001&amp;#34; -OutFile ./depot_tools.zip&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Invoke-WebRequest -URI &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   https://storage.googleapis.com/chrome-infra/depot_tools.zip &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   -OutFile ./depot_tools.zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 解压，需要安装7zip&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; 7z x .&lt;span style=&#34;color:#ae81ff&#34;&gt;\d&lt;/span&gt;epot_tools.zip -odepot_tools&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 检查.git子目录存在&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; ls .&lt;span style=&#34;color:#ae81ff&#34;&gt;\d&lt;/span&gt;epot_tools&lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cd .&lt;span style=&#34;color:#ae81ff&#34;&gt;\d&lt;/span&gt;epot_tools&lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 修改环境变量, 仅当前会话生效&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; $env:PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PWD&lt;span style=&#34;color:#e6db74&#34;&gt;/;&lt;/span&gt;$env&lt;span style=&#34;color:#e6db74&#34;&gt;:PATH&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; $env:DEPOT_TOOLS_WIN_TOOLCHAIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# $env:vs2019_install= `&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置代理&#34;&gt;配置代理&lt;/h3&gt;&#xA;&lt;p&gt;depot_tools 需要挂代理才能正常运行，它是多个工具、脚本的集合，代理设置也需要配置多项。&lt;/p&gt;</description>
    </item>
    <item>
      <title>渐进式的开发一个 fuzzer (WIP)</title>
      <link>http://localhost:1313/posts/2022-12-05-inc-dev-fuzzer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-12-05-inc-dev-fuzzer/</guid>
      <description>&lt;p&gt;最近看了一些增量开发编译器的文章后，我就想到我也可以增量开发一个 fuzzer：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发过程由很多轮的迭代组成&lt;/li&gt;&#xA;&lt;li&gt;每一轮迭代周期都尽量短，根据每轮的复杂度可能是几小时到几周时间&lt;/li&gt;&#xA;&lt;li&gt;每一轮迭代产出的都是一个可用的 fuzzer&lt;/li&gt;&#xA;&lt;li&gt;每轮迭代的产出不需要是一个完美的解决方案，首先保证可用性，复杂的问题甚至可以先考虑部分解。&lt;/li&gt;&#xA;&lt;li&gt;为了保证每一轮迭代开发工作量尽可能少，我会倾向于先使用开源的库，如果有必要的话，再把开源的库替换成自己开发的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;li&gt;我选择的目标是开源项目 mujs，给它写一个 generation-based fuzzer，开发语言选择 python&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;⚠️ 增量开发编译的文章：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&#34;&gt;An Incremental Approach to Compiler Construction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/awesome-kusion/rust-toy-lang-book&#34;&gt;用 Rust 开发编程语言&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第一轮&#34;&gt;第一轮&lt;/h2&gt;&#xA;&lt;p&gt;babystep 一定要走稳，第一轮就只实现用 mujs 执行一段固定的程序，监控一下 mujs 是否崩溃即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>获取旧版本的 Chrome</title>
      <link>http://localhost:1313/posts/2022-05-31-get-old-version-chrome-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-05-31-get-old-version-chrome-binary/</guid>
      <description>&lt;p&gt;复现 Chrome 漏洞肯定需要要先拿到受影响的旧版程序，本文记录两种获取任意版本 Chrome 文件的方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从源码构建，优点是可以得到 Debug 版的文件便于调试，缺点是需要花很长时间。&lt;/li&gt;&#xA;&lt;li&gt;Chromium 团队维护了一份旧版 Chrome 的备份，包含调试符号，可以用来调试。缺点是备份只有 Release 版，且有部分版本是没有备份的，需要用临近版本替代。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;构建&#34;&gt;构建&lt;/h2&gt;&#xA;&lt;p&gt;构建方法参考了&lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/master/docs/building_old_revisions.md&#34;&gt;官方文档&lt;/a&gt;和&lt;a href=&#34;https://stackoverflow.com/questions/47087970/how-to-checkout-and-build-specific-chromium-tag-branch-without-download-the-full&#34;&gt; StackOverflow 上的回答&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;获取指定版本的源码&#34;&gt;获取指定版本的源码&lt;/h3&gt;&#xA;&lt;p&gt;由于网络环境恶略，我只下载指定 Tag 的代码，不下载历史 Commit。&#xA;网络环境好的话，可以去掉 &lt;code&gt;--deph 1&lt;/code&gt; 选项，下载完整的 Commit 记录，避免不必要的问题。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 把tags/ 和 chromium_ 后面的 Major.Minor.Patch.Build 形式的版本号替换成你需要的版本&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git fetch &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;  https://chromium.googlesource.com/chromium/src.git &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;  +refs/tags/59.0.3071.115:chromium_59.0.3071.115 --depth &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git checkout tags/59.0.3071.115&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;ℹ️NOTE&lt;/strong&gt;: 构建脚本需要从上一个 Commit 获取时间戳，不下载历史 Commit 就需要在构建时手工修正这个时间戳，后面会介绍修正方法。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;depot_tools-切换到对应的版本可选&#34;&gt;depot_tools 切换到对应的版本（可选）&lt;/h3&gt;&#xA;&lt;p&gt;把 depot_tools 切换到和源码对应的版本，防止兼容性问题。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# chrome 源码的时间戳&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/chrome/src &amp;gt; git log -n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --pretty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format:%ci&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# depot_tools 切换到对应时间的 commit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/depot_tools &amp;gt; git rev-list -n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --before&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;上一步获取的时间戳&amp;#34;&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/depot_tools &amp;gt; git checkout 上一步获取的 Commit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 禁用 depot_tools 自动更新&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/depot_tools &amp;gt; $env:DEPOT_TOOLS_UPDATE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;同步依赖&#34;&gt;同步依赖&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 清理历史文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; git clean -ffd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 下载依赖&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; gclient syn -D --force --reset&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构建-1&#34;&gt;构建&lt;/h3&gt;&#xA;&lt;p&gt;参考 &lt;a href=&#34;./2022-03-20-build-chromium&#34;&gt;墙内构建 Chromium&lt;/a&gt; 用 GN 和 Ninja 执行构建。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
